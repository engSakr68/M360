# frozen_string_literal: true

$ios_target_version = '15.0'
platform :ios, $ios_target_version
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Use the CocoaPods CDN
source 'https://cdn.cocoapods.org/'

# --- Flutter wiring ---
def flutter_root
  generated = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  raise "#{generated} must exist. Run `flutter pub get` first." unless File.exist?(generated)
  File.foreach(generated) { |l| return $1.strip if l =~ /FLUTTER_ROOT=(.*)/ }
  raise 'FLUTTER_ROOT not found'
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
flutter_ios_podfile_setup

# Map the Runner configurations CocoaPods should emit xcconfigs for
project 'Runner', {
  'Debug'   => :debug,
  'Release' => :release,
  'Profile' => :release,
}

# We need module maps for many C/ObjC deps; keep modular headers on
use_modular_headers!

target 'Runner' do
  # Enable frameworks with static linkage
  use_frameworks! :linkage => :static

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  # --- Local Openpath pods
  pod 'OpenpathMobile',         :path => File.expand_path('vendor/openpath/OpenpathMobile', __dir__)
  pod 'OpenpathMobileAllegion', :path => File.expand_path('vendor/openpath/OpenpathMobileAllegion', __dir__)
  pod 'OpenSSL-Universal',      '1.1.2301'

  # --- Local Amplitude (Swift + Core) combined binary pod
  pod 'AmplitudeBinary', :path => File.expand_path('vendor/openpath', __dir__)

  # --- PromiseKit: Using the main pod with frameworks enabled
  pod 'PromiseKit', '~> 8.0'
  
  # --- Other dependencies
  pod 'DKImagePickerController', '4.3.3'
  pod 'DKPhotoGallery', '0.0.17'
  
  # --- Firebase pods with updated versions to match plugin requirements
  pod 'Firebase/Core', '12.2.0'
  pod 'Firebase/Analytics', '12.2.0'
  pod 'Firebase/Crashlytics', '12.2.0'
  pod 'Firebase/Messaging', '12.2.0'
end

post_install do |installer|
  # --- Flutter defaults + some safe globals
  installer.pods_project.targets.each do |t|
    flutter_additional_ios_build_settings(t)
    t.build_configurations.each do |cfg|
      cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = $ios_target_version
      cfg.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'YES'
      # If building on Intel macOS, keep the next line; on Apple Silicon you can remove it.
      cfg.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
    end
  end

  # --- COMPREHENSIVE PRIVACY BUNDLE FIX ---
  puts "🔧 Setting up comprehensive privacy bundle fix..."
  
  # Get the Runner target
  app_target = installer.pods_project.targets.find { |t| t.name == 'Runner' }
  
  if app_target
    # Remove any existing privacy script phases
    app_target.shell_script_build_phases.dup.each do |phase|
      if phase.name && (phase.name.include?('Privacy') || phase.name.include?('privacy') || phase.name.include?('🩹'))
        app_target.build_phases.delete(phase)
        puts "• Removed existing privacy script phase: #{phase.name}"
      end
    end

    # Create comprehensive privacy bundle copy script phase
    privacy_phase = app_target.new_shell_script_build_phase('[CP] Comprehensive Privacy Bundle Fix')
    privacy_phase.shell_path = '/bin/sh'
    privacy_phase.show_env_vars_in_log = false
    privacy_phase.shell_script = <<~SCRIPT
      # Run the enhanced privacy bundle fix script
      if [ -f "${SRCROOT}/enhanced_privacy_bundle_fix.sh" ]; then
        echo "Running enhanced privacy bundle fix script..."
        "${SRCROOT}/enhanced_privacy_bundle_fix.sh"
      elif [ -f "${SRCROOT}/comprehensive_privacy_build_script.sh" ]; then
        echo "Running comprehensive privacy bundle build script..."
        "${SRCROOT}/comprehensive_privacy_build_script.sh"
      else
        echo "⚠️ No privacy bundle fix script found"
        exit 1
      fi
    SCRIPT
    
    # Move this phase to be early in the build process
    app_target.build_phases.move(privacy_phase, 0)
    puts "✅ Added comprehensive privacy bundle fix phase to Runner target"
  else
    puts "⚠️ Runner target not found in Pods project"
  end

  # --- Disable BUILD_LIBRARY_FOR_DISTRIBUTION for ALL targets
  puts "🔧 Disabling BUILD_LIBRARY_FOR_DISTRIBUTION for all targets..."
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'NO'
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = $ios_target_version
      config.build_settings['SWIFT_COMPILATION_MODE'] = 'wholemodule'
    end
  end
  puts "✅ BUILD_LIBRARY_FOR_DISTRIBUTION disabled for all targets"

  # --- SwiftCBOR Framework Embedding ---
  if app_target
    # Remove any existing SwiftCBOR script phases
    app_target.shell_script_build_phases.dup.each do |phase|
      if phase.name && (phase.name.include?('SwiftCBOR') || phase.name.include?('🩹'))
        app_target.build_phases.delete(phase)
        puts "• Removed existing SwiftCBOR script phase: #{phase.name}"
      end
    end

    # Create a script phase to embed SwiftCBOR framework
    embed_framework_phase = app_target.new_shell_script_build_phase('[CP] Embed SwiftCBOR Framework')
    embed_framework_phase.shell_path = '/bin/sh'
    embed_framework_phase.show_env_vars_in_log = false
    embed_framework_phase.dependency_file = nil
    
    # Script to embed the SwiftCBOR framework
    embed_script = <<~SCRIPT
      set -e
      set -u
      set -o pipefail
      
      echo "=== Embedding SwiftCBOR Framework ==="
      
      # Paths
      FRAMEWORK_NAME="SwiftCBOR.framework"
      BUILT_PRODUCTS_DIR="${BUILT_PRODUCTS_DIR}"
      CONTAINER_FRAMEWORKS_DIR="${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}"
      LOCAL_FRAMEWORK_PATH="${SRCROOT}/${FRAMEWORK_NAME}"
      
      # Create the frameworks directory if it doesn't exist
      mkdir -p "${CONTAINER_FRAMEWORKS_DIR}"
      
      # Check if the local framework exists
      if [ -d "${LOCAL_FRAMEWORK_PATH}" ]; then
        echo "Found local SwiftCBOR framework at: ${LOCAL_FRAMEWORK_PATH}"
        
        # Copy the framework to the app bundle
        echo "Copying framework to app bundle..."
        cp -R "${LOCAL_FRAMEWORK_PATH}" "${CONTAINER_FRAMEWORKS_DIR}/"
        
        # Verify the framework was copied
        if [ -d "${CONTAINER_FRAMEWORKS_DIR}/${FRAMEWORK_NAME}" ]; then
          echo "✅ SwiftCBOR framework copied successfully"
        else
          echo "❌ Failed to copy SwiftCBOR framework to app bundle"
          exit 1
        fi
        
        # Code sign the framework
        if [ -n "${EXPANDED_CODE_SIGN_IDENTITY}" ]; then
          echo "Code signing framework..."
          /usr/bin/codesign --force --deep --sign "${EXPANDED_CODE_SIGN_IDENTITY}" --timestamp=none "${CONTAINER_FRAMEWORKS_DIR}/${FRAMEWORK_NAME}"
        fi
        
        echo "✅ SwiftCBOR framework embedded successfully"
      else
        echo "ERROR: Local SwiftCBOR framework not found at ${LOCAL_FRAMEWORK_PATH}"
        exit 1
      fi
      
      echo "=== SwiftCBOR Framework Embedding Complete ==="
    SCRIPT
    
    embed_framework_phase.shell_script = embed_script
    
    # Move the script phase to be the last phase
    app_target.build_phases.move(embed_framework_phase, app_target.build_phases.count - 1)
    puts "✅ Added SwiftCBOR framework embedding script phase to Runner target"
  end

  # --- Ensure Flutter module/headers are visible
  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |cfg|
      # Framework search paths
      cfg.build_settings['FRAMEWORK_SEARCH_PATHS'] ||= ['$(inherited)']
      fsp = Array(cfg.build_settings['FRAMEWORK_SEARCH_PATHS'])
      fsp += [
        '$(PODS_CONFIGURATION_BUILD_DIR)/Flutter',
        File.join('${SRCROOT}', 'Flutter'),
        File.join('${SRCROOT}')
      ]
      cfg.build_settings['FRAMEWORK_SEARCH_PATHS'] = fsp.uniq

      # Header search paths
      cfg.build_settings['HEADER_SEARCH_PATHS'] ||= ['$(inherited)']
      hsp = Array(cfg.build_settings['HEADER_SEARCH_PATHS'])
      hsp += [
        '$(PODS_ROOT)/Headers/Public',
        '$(PODS_ROOT)/Headers/Public/Flutter',
        '$(PODS_CONFIGURATION_BUILD_DIR)/Flutter/Flutter.framework/Headers',
        File.join('${SRCROOT}', 'Flutter', 'Flutter.framework', 'Headers')
      ]
      cfg.build_settings['HEADER_SEARCH_PATHS'] = hsp.uniq

      cfg.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
    end
  end
  
  puts "✅ Comprehensive privacy bundle fix completed"
end
